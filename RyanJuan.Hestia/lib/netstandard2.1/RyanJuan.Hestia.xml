<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RyanJuan.Hestia</name>
    </assembly>
    <members>
        <member name="T:RyanJuan.Hestia.BackgroundRunner">
            <summary>
            
            </summary>
        </member>
        <member name="M:RyanJuan.Hestia.BackgroundRunner.Run(System.Action,System.Action{System.Exception})">
            <summary>
            Fire and forget.
            </summary>
            <param name="action"></param>
            <param name="exceptionHandler"></param>
        </member>
        <member name="M:RyanJuan.Hestia.BackgroundRunner.Run(System.Func{System.Threading.Tasks.Task},System.Action{System.Exception})">
            <summary>
            Fire and forget.
            </summary>
            <param name="function"></param>
            <param name="exceptionHandler"></param>
        </member>
        <member name="M:RyanJuan.Hestia.BackgroundRunner.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Action{System.Exception})">
            <summary>
            Fire and forget.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <param name="exceptionHandler"></param>
        </member>
        <member name="T:RyanJuan.Hestia.Hestia">
            <summary>
            
            </summary>
        </member>
        <member name="M:RyanJuan.Hestia.Hestia.ToLowerString(System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.Hestia.ToLowerString(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.Hestia.IsWhiteSpace(System.Char)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.Hestia.IsNotWhiteSpace(System.Char)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:RyanJuan.Hestia.Hestia.SupportedRuntimes">
            <summary>
            
            </summary>
        </member>
        <member name="F:RyanJuan.Hestia.Hestia.SupportedRuntimes.NET40">
            <summary>
            .Net Framework 4.0
            </summary>
        </member>
        <member name="F:RyanJuan.Hestia.Hestia.SupportedRuntimes.NET45">
            <summary>
            .Net Framework 4.5
            </summary>
        </member>
        <member name="F:RyanJuan.Hestia.Hestia.SupportedRuntimes.NETSTANDARD2_0">
            <summary>
            .Net Standard 2.0
            </summary>
        </member>
        <member name="F:RyanJuan.Hestia.Hestia.SupportedRuntimes.NETSTANDARD2_1">
            <summary>
            .Net Standard 2.1
            </summary>
        </member>
        <member name="F:RyanJuan.Hestia.Hestia.SupportedRuntimes.NETCOREAPP2_1">
            <summary>
            .Net Core 2.1
            </summary>
        </member>
        <member name="F:RyanJuan.Hestia.Hestia.SupportedRuntimes.NETCOREAPP3_0">
            <summary>
            .Net Core 3.0
            </summary>
        </member>
        <member name="P:RyanJuan.Hestia.Hestia.CurrentTargetedRuntimeVersion">
            <summary>
            The targeted .NET runtime of Hestia.
            .NET will automatic chosen the closest version
            if there is no matching runtime.
            </summary>
        </member>
        <member name="M:RyanJuan.Hestia.Hestia.IsNull``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.Hestia.IsNotNull``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.Hestia.ToStringOrEmpty(System.Nullable{System.DateTime},System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="datetime"></param>
            <param name="format"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.Hestia.ToEnumerable``1(``0)">
            <summary>
            Wrap <paramref name="t"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">Type of <paramref name="t"/>.</typeparam>
            <param name="t">The object to wrap.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> wrapping <paramref name="t"/>.</returns>
        </member>
        <member name="T:RyanJuan.Hestia.HestiaCollections">
            <summary>
            
            </summary>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.AllDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether all elements of a sequence has the difference value.
            </summary>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements to check for difference.
            </param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>
            <see langword="true"/> if every element of the source sequence has the difference value,
            or if the sequence is empty;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.AllDifference``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether all elements of a sequence has the difference value.
            </summary>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements to check for difference.
            </param>
            <returns>
            <see langword="true"/> if every element of the source sequence has the difference value,
            or if the sequence is empty;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.AllEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether all elements of a sequence has the same value.
            </summary>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements to check for equality.
            </param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>
            <see langword="true"/> if every element of the source sequence has the same value,
            or if the sequence is empty;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.AllEquals``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether all elements of a sequence has the same value.
            </summary>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <param name="source">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements to check for equality.
            </param>
            <returns>
            <see langword="true"/> if every element of the source sequence has the same value,
            or if the sequence is empty;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.Concat``1(``0[],``0[][])">
            <summary>
            Concatenates two or many arrays.
            </summary>
            <typeparam name="TSource">The type of the elements of the input arrays.</typeparam>
            <param name="first">The first array to concatenate.</param>
            <param name="others">The arrays to concatenate to the first array.</param>
            <returns>
            An <typeparamref name="TSource"/>[] that contains the concatenated elements of
            many input arrays.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="first"/> or <paramref name="others"/> is <see langword="null"/>,
            or any item in <paramref name="others"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.Contains``1(``0[],``0)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="batchSize"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.Clear``1(System.Collections.Concurrent.ConcurrentBag{``0})">
            <summary>
            Remove all elements in the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.
            </typeparam>
            <param name="source">The specific <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.AddMany``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds the multiple <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to the
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">
            The type of keys in the <paramref name="dictionary"/>.
            </typeparam>
            <typeparam name="TValue">
            The type of values in the <paramref name="dictionary"/>.
            </typeparam>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> for adding.
            </param>
            <param name="values">
            The key value pairs to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> or <paramref name="values"/>
            is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.AddMany``2(System.Collections.Generic.IDictionary{``1,``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Adds the multiple values to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TSource">
            The type of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of keys in the <paramref name="dictionary"/>.
            </typeparam>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> for adding.
            </param>
            <param name="source">
            An enumerable of values to add.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/>, <paramref name="source"/> or
            <paramref name="keySelector"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.AddMany``3(System.Collections.Generic.IDictionary{``1,``2},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Adds the multiple values to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TSource">
            The type of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of keys in the <paramref name="dictionary"/>.
            </typeparam>
            <typeparam name="TElement">
            The type of values in the <paramref name="dictionary"/>.
            </typeparam>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> for adding.
            </param>
            <param name="source">
            An enumerable of values to add.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/>, <paramref name="source"/>, <paramref name="keySelector"/>
            or <paramref name="elementSelector"/>
            is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> wrapper for
            the specific <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">
            The type of the key of <paramref name="dictionary"/>.
            </typeparam>
            <typeparam name="TValue">
            The type of the value of <paramref name="dictionary"/>.
            </typeparam>
            <param name="dictionary">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> to wrap as
            <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/>.
            </param>
            <returns>
            A <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> that wrap around the specific
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Tries to get the value associated with the specified key in the
            <paramref name="dictionary"/>.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">
            A dictionary with keys of type <typeparamref name="TKey"/>
            and values of type <typeparamref name="TValue"/>.
            </param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">
            The default value to return when the <paramref name="dictionary"/>
            cannot find a value associated with the specified 
            <paramref name="key"/>.
            </param>
            <returns>
            A <typeparamref name="TValue"/> instance.
            When the method is successful,
            the returned object is the value associated with the specified
            <paramref name="key"/>. When the method fails, it returns
            <paramref name="defaultValue"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Tries to get the value associated with the specified key in the
            <paramref name="dictionary"/>.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">
            A dictionary with keys of type <typeparamref name="TKey"/>
            and values of type <typeparamref name="TValue"/>.
            </param>
            <param name="key">The key of the value to get.</param>
            <returns>
            A <typeparamref name="TValue"/> instance.
            When the method is successful,
            the returned object is the value associated with the specified
            <paramref name="key"/>. When the method fails, it returns
            the <see langword="default"/> value for 
            <typeparamref name="TValue"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.Split``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},RyanJuan.Hestia.EnumerableSplitOptions)">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="separator"></param>
            <param name="comparer"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaCollections.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:RyanJuan.Hestia.NonGeneric.HestiaNonGenericCollections">
            <summary>
            
            </summary>
        </member>
        <member name="M:RyanJuan.Hestia.NonGeneric.HestiaNonGenericCollections.All(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.NonGeneric.HestiaNonGenericCollections.Any(System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.NonGeneric.HestiaNonGenericCollections.Any(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.NonGeneric.HestiaNonGenericCollections.Contains(System.Collections.IEnumerable,System.Object,System.Collections.IEqualityComparer)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.NonGeneric.HestiaNonGenericCollections.Contains(System.Collections.IEnumerable,System.Object)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.NonGeneric.HestiaNonGenericCollections.Count(System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.NonGeneric.HestiaNonGenericCollections.LongCount(System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:RyanJuan.Hestia.Defer">
            <summary>
            
            </summary>
        </member>
        <member name="M:RyanJuan.Hestia.Defer.Do(System.Action)">
            <summary>
            
            </summary>
            <param name="deferAction"></param>
            <returns></returns>
        </member>
        <member name="T:RyanJuan.Hestia.Defer.DeferDisposable">
            <summary>
            
            </summary>
        </member>
        <member name="M:RyanJuan.Hestia.Defer.DeferDisposable.#ctor(System.Action)">
            <summary>
            
            </summary>
            <param name="deferAction"></param>
        </member>
        <member name="M:RyanJuan.Hestia.Defer.DeferDisposable.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:RyanJuan.Hestia.Defer.Do``1(System.Action{``0},``0)">
            <summary>
            
            </summary>
            <typeparam name="TParam"></typeparam>
            <param name="deferAction"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:RyanJuan.Hestia.Defer.DeferDisposable`1">
            <summary>
            
            </summary>
            <typeparam name="TParam"></typeparam>
        </member>
        <member name="M:RyanJuan.Hestia.Defer.DeferDisposable`1.#ctor(System.Action{`0},`0)">
            <summary>
            
            </summary>
            <param name="deferAction"></param>
            <param name="param"></param>
        </member>
        <member name="M:RyanJuan.Hestia.Defer.DeferDisposable`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:RyanJuan.Hestia.Defer.DoAsync(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            
            </summary>
            <param name="deferAction"></param>
            <returns></returns>
        </member>
        <member name="T:RyanJuan.Hestia.Defer.DeferAsyncDisposable">
            <summary>
            
            </summary>
        </member>
        <member name="M:RyanJuan.Hestia.Defer.DeferAsyncDisposable.#ctor(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            
            </summary>
            <param name="deferAction"></param>
        </member>
        <member name="M:RyanJuan.Hestia.Defer.DeferAsyncDisposable.DisposeAsync">
            <summary>
            
            </summary>
        </member>
        <member name="M:RyanJuan.Hestia.Defer.DoAsync``1(System.Func{``0,System.Threading.Tasks.ValueTask},``0)">
            <summary>
            
            </summary>
            <param name="deferAction"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:RyanJuan.Hestia.Defer.DeferAsyncDisposable`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:RyanJuan.Hestia.Defer.DeferAsyncDisposable`1.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask},`0)">
            <summary>
            
            </summary>
            <param name="deferAction"></param>
            <param name="param"></param>
        </member>
        <member name="M:RyanJuan.Hestia.Defer.DeferAsyncDisposable`1.DisposeAsync">
            <summary>
            
            </summary>
        </member>
        <member name="T:RyanJuan.Hestia.HestiaEnum">
            <summary>
            
            </summary>
        </member>
        <member name="T:RyanJuan.Hestia.HestiaReflection">
            <summary>
            
            </summary>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaReflection.GetInstanceProperties(System.Type)">
            <summary>
            Search the properties of the specific <see cref="T:System.Type"/> which is declared instance
            member both public and non-public.
            </summary>
            <param name="type">The specific <see cref="T:System.Type"/>.</param>
            <returns>
            The properties of the specific <see cref="T:System.Type"/> which is declared instance
            member both public and non-public.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaReflection.GetValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Return the field or property value of object where the member type is decided by
            <see cref="P:System.Reflection.MemberInfo.MemberType"/>.
            Return <see langword="null"/> if the member type is not valid.
            </summary>
            <param name="memberInfo">The <see cref="T:System.Reflection.MemberInfo"/> of the member.</param>
            <param name="obj">The data instance.</param>
            <returns>Field or property value of object.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="memberInfo"/> or <paramref name="obj"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:RyanJuan.Hestia.ReflectionCenter">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="T:RyanJuan.Hestia.HestiaString">
            <summary>
            
            </summary>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.IsEmpty(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.IsNotEmpty(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.IsNull(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.IsNotNull(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.IsNullOrEmpty(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.IsNotNullOrEmpty(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.IsNullOrWhiteSpace(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.IsNotNullOrWhiteSpace(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.IsWhiteSpace(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.IsNotWhiteSpace(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.RegexEscape(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.RegexIsMatch(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.RegexMatch(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.RegexReplace(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="pattern"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.Slice(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RyanJuan.Hestia.HestiaString.SliceByUTF8ByteLength(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="byteLength"></param>
            <returns></returns>
        </member>
        <member name="T:RyanJuan.Hestia.HestiaTask">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
